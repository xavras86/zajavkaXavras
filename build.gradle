plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'org.openapi.generator' version "${openapiGeneratorVersion}"
}

group = 'pl.zajavka'
version = '1.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //db
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.postgresql:postgresql'

    // annotations
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

//    //api
//    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocOpenApiVersion}"
//
//    //powygenerowaniu klienta trzeba będzie dodać poniższe zależności żeby kod się kompilował
//    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
//    implementation "javax.annotation:javax.annotation-api:${javaxAnnotationApiVersion}"
//    implementation "io.swagger:swagger-annotations:${swaggerAnnotationsVersion}"

    //warning: unknown enum constant When.MAYBE
    //reason: class file for javax.annotation.meta.When not found
//    implementation "com.google.code.findbugs:jsr305:${jsr305Version}"

    // test
//    testRuntimeOnly 'com.h2database:h2'
//    testCompileOnly 'org.projectlombok:lombok'
//    testAnnotationProcessor 'org.projectlombok:lombok'
//    testImplementation 'org.springframework.security:spring-security-test'
//    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.testcontainers:junit-jupiter'
//    testImplementation 'org.testcontainers:postgresql'

    //testy integracyjne
//    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
////    testImplementation "com.github.tomakehurst:wiremock:${wiremockVersion}" - nie działa ze spring boot 3
//    testImplementation "org.slf4j:slf4j-api:${wiremockSlf4jVersion}"
//    //trzeba było dodac osobno slf4j przed wiremock-standalone bo się mieszał z tym dostarczanym przez wiremock
//    testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremockVersion}"

}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}


//openApiGenerate {
//    generatorName = "java"
//    library = "webclient"
//    configOptions = [
//            serializableModel : "true",
//            dateLibrary : "java8",
//            serializationLibrary: "jackson"
//    ]
//
//    outputDir = "$buildDir/generated-sources/openapi".toString()
//    inputSpec = "$rootDir/src/main/resources/contracts/cepik-1.1.3.json".toString()
//    apiPackage = "pl.zajavka.infrastructure.cepik.api"
//    modelPackage = "pl.zajavka.infrastructure.cepik.model"
//}
//
//sourceSets{
//    main{
//        java.srcDirs += "$buildDir/generated-sources/openapi/src/main/java"
//    }
//}
//
//compileJava.dependsOn tasks.openApiGenerate

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

compileJava.options.encoding = 'UTF-8'